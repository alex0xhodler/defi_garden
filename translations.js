// Multi-language translation system
const translations = {
  en: {
    // Search
    searchPlaceholder: "Search for a token...",
    searchHint: "Try searching for 'ETH on Arbitrum' or 'USDC lending'",
    tokenSearch: "Token Search",
    feelingDegen: "I'm Feeling Degen",
    
    // Filter labels
    chains: "Chains",
    allChains: "All Chains",
    protocols: "Protocols",
    popular: "Popular",
    allProtocols: "All Protocols",
    poolTypes: "Pool Types",
    minTvl: "Minimum TVL",
    minApy: "Minimum APY",
    noMin: "No Min",
    
    // Results
    showingResults: (count) => `${count} pool${count !== 1 ? 's' : ''} found`,
    chainYields: (chain) => `${chain} DeFi Yields`,
    tokenYields: (token, chain) => `Yields for ${token}${chain ? ` on ${chain}` : ''}`,
    
    // Pool card labels
    totalApy: "Total APY",
    baseApy: "Base APY:",
    rewardApy: "Reward APY:",
    baseApyBreakdown: (apy) => `${apy}% Base`,
    rewardApyBreakdown: (apy) => `+ ${apy}% Rewards`,
    opensProtocol: "Opens protocol ‚Ä¢ Wallet required",
    protocol: "Protocol‚Üó",
    calculateYield: "Calculate Yield",
    startEarning: "Start Earning",
    startEarningOn: (protocol) => `Start Earning on ${protocol}`,
    
    // Pool details
    daily: "Daily",
    monthly: "Monthly",
    riskAssessment: "Risk Assessment",
    lowRisk: "Low",
    mediumRisk: "Medium", 
    highRisk: "High",
    
    // Numbers and earnings
    dailyEarnings: (amount) => `$${amount}/day`,
    monthlyEarnings: (amount) => `Monthly ($${amount.toLocaleString()})`,
    estimatedEarnings: "Estimated Earnings",
    estimatedDailyEarnings: "Estimated Daily Earnings",
    estimatedMonthlyEarnings: "Estimated Monthly Earnings",
    
    // Empty states and errors
    noYieldsFound: (token) => `No yields found for ${token}`,
    noYieldsFoundChain: (chain) => `No yields found on ${chain} with current filters`,
    adjustFilters: "Try adjusting your filters or searching for a different token",
    adjustFiltersChain: "Try adjusting your TVL or APY filters, or select a different chain",
    resetFilters: "Reset Filters",
    loadingError: "Failed to load yield data. Please try again later.",
    
    // Navigation
    backToSearch: "‚Üê Back to Search",
    
    // Pool detail labels
    poolInformation: "Pool Information",
    poolType: "Pool Type", 
    underlyingAssets: "Underlying Assets",
    calculateYourEarnings: "Calculate Your Earnings",
    quickEstimate: (amount, daily) => `Quick estimate for $${amount.toLocaleString()}: $${daily}/day`,
    basedOnInvestment: (amount) => `Based on $${amount.toLocaleString()} investment`,
    verified: "‚úì Verified",
    onProtocolChain: (protocol, chain, hasUrl) => `on ${protocol} ‚Ä¢ ${chain}${hasUrl ? ' ‚Üó' : ''}`,
    tvl: "TVL",
    
    // Footer
    poweredBy: "Powered by",
    madeWith: "Made with AI & Degen Love.",
    
    // Page titles (for SEO)
    pageTitle: "DeFi Garden üå± | Discover Highest Yield Farming Opportunities Across All Chains",
    tokenPageTitle: (token) => `${token.toUpperCase()} Yields | DeFi Garden üå±`,
    chainPageTitle: (chain) => `${chain} DeFi Yields | DeFi Garden üå±`,
    poolPageTitle: (symbol, project) => `${symbol} on ${project} | DeFi Garden üå±`,
    
    // Meta descriptions
    metaDescription: "Find the best DeFi yields for your tokens with DeFi Garden. Compare lending, staking, and LP rewards across 50+ protocols and all major chains. Real-time APY data from Defillama API with intelligent filtering by token, chain, TVL, and pool type."
  },
  
  ko: {
    // Search
    searchPlaceholder: "ÌÜ†ÌÅ∞ Í≤ÄÏÉâ...",
    searchHint: "'Arbitrum ETH' ÎòêÎäî 'USDC ÎåÄÏ∂ú'Î°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî",
    tokenSearch: "ÌÜ†ÌÅ∞ Í≤ÄÏÉâ",
    feelingDegen: "ÎîîÏ†† Î™®Îìú",
    
    // Filter labels
    chains: "Ï≤¥Ïù∏",
    allChains: "Î™®Îì† Ï≤¥Ïù∏",
    protocols: "ÌîÑÎ°úÌÜ†ÏΩú",
    popular: "Ïù∏Í∏∞",
    allProtocols: "Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩú",
    poolTypes: "ÌíÄ Ïú†Ìòï",
    minTvl: "ÏµúÏÜå TVL",
    minApy: "ÏµúÏÜå APY",
    noMin: "Ï†úÌïú ÏóÜÏùå",
    
    // Results
    showingResults: (count) => `${count}Í∞ú ÌíÄ Î∞úÍ≤¨`,
    chainYields: (chain) => `${chain} DeFi ÏàòÏùµÎ•†`,
    tokenYields: (token, chain) => `${token} ÏàòÏùµÎ•†${chain ? ` (${chain})` : ''}`,
    
    // Pool card labels
    totalApy: "Ï¥ù APY",
    baseApy: "Í∏∞Î≥∏ APY:",
    rewardApy: "Î≥¥ÏÉÅ APY:",
    baseApyBreakdown: (apy) => `${apy}% Í∏∞Î≥∏`,
    rewardApyBreakdown: (apy) => `+ ${apy}% Î≥¥ÏÉÅ`,
    opensProtocol: "ÌîÑÎ°úÌÜ†ÏΩú Ïó¥Í∏∞ ‚Ä¢ ÏßÄÍ∞ë ÌïÑÏöî",
    protocol: "ÌîÑÎ°úÌÜ†ÏΩú‚Üó",
    calculateYield: "ÏàòÏùµ Í≥ÑÏÇ∞",
    startEarning: "ÏàòÏùµ ÏãúÏûë",
    startEarningOn: (protocol) => `${protocol}ÏóêÏÑú ÏàòÏùµ ÏãúÏûë`,
    
    // Pool details
    daily: "ÏùºÏùº",
    monthly: "ÏõîÍ∞Ñ",
    riskAssessment: "ÏúÑÌóòÎèÑ ÌèâÍ∞Ä",
    lowRisk: "ÎÇÆÏùå",
    mediumRisk: "Î≥¥ÌÜµ",
    highRisk: "ÎÜíÏùå",
    
    // Numbers and earnings
    dailyEarnings: (amount) => `${formatKoreanCurrency(amount)}/Ïùº`,
    monthlyEarnings: (amount) => `ÏõîÍ∞Ñ (${formatKoreanCurrency(amount)})`,
    estimatedEarnings: "ÏòàÏÉÅ ÏàòÏùµ",
    estimatedDailyEarnings: "ÏòàÏÉÅ ÏùºÏùº ÏàòÏùµ",
    estimatedMonthlyEarnings: "ÏòàÏÉÅ ÏõîÍ∞Ñ ÏàòÏùµ",
    
    // Empty states and errors
    noYieldsFound: (token) => `${token}Ïóê ÎåÄÌïú ÏàòÏùµÎ•†ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`,
    noYieldsFoundChain: (chain) => `ÌòÑÏû¨ ÌïÑÌÑ∞Î°ú ${chain}ÏóêÏÑú ÏàòÏùµÎ•†ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`,
    adjustFilters: "ÌïÑÌÑ∞Î•º Ï°∞Ï†ïÌïòÍ±∞ÎÇò Îã§Î•∏ ÌÜ†ÌÅ∞ÏùÑ Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî",
    adjustFiltersChain: "TVL ÎòêÎäî APY ÌïÑÌÑ∞Î•º Ï°∞Ï†ïÌïòÍ±∞ÎÇò Îã§Î•∏ Ï≤¥Ïù∏ÏùÑ ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî",
    resetFilters: "ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî",
    loadingError: "ÏàòÏùµÎ•† Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
    
    // Navigation
    backToSearch: "‚Üê Í≤ÄÏÉâÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞",
    
    // Pool detail labels
    poolInformation: "ÌíÄ Ï†ïÎ≥¥",
    poolType: "ÌíÄ Ïú†Ìòï",
    underlyingAssets: "Í∏∞Ï¥à ÏûêÏÇ∞",
    calculateYourEarnings: "ÏàòÏùµ Í≥ÑÏÇ∞ÌïòÍ∏∞",
    quickEstimate: (amount, daily) => `${formatKoreanCurrency(amount)} ÏòàÏÉÅ: ${formatKoreanCurrency(parseFloat(daily.replace('$', '').replace(',', '')) * 1200)}/Ïùº`,
    basedOnInvestment: (amount) => `${formatKoreanCurrency(amount)} Ìà¨Ïûê Í∏∞Ï§Ä`,
    verified: "‚úì Ïù∏Ï¶ùÎê®",
    onProtocolChain: (protocol, chain, hasUrl) => `${protocol}ÏóêÏÑú ‚Ä¢ ${chain}${hasUrl ? ' ‚Üó' : ''}`,
    tvl: "TVL",
    
    // Footer
    poweredBy: "Ï†úÍ≥µ:",
    madeWith: "AIÏôÄ ÎîîÏ†† ÏÇ¨ÎûëÏúºÎ°ú Ï†úÏûë.",
    
    // Page titles (for SEO)
    pageTitle: "DeFi Garden üå± | Î™®Îì† Ï≤¥Ïù∏ÏóêÏÑú ÏµúÍ≥† ÏàòÏùµÎ•† Ï∞æÍ∏∞",
    tokenPageTitle: (token) => `${token.toUpperCase()} ÏàòÏùµÎ•† | DeFi Garden üå±`,
    chainPageTitle: (chain) => `${chain} DeFi ÏàòÏùµÎ•† | DeFi Garden üå±`,
    poolPageTitle: (symbol, project) => `${symbol} (${project}) | DeFi Garden üå±`,
    
    // Meta descriptions
    metaDescription: "DeFi GardenÏúºÎ°ú ÌÜ†ÌÅ∞Ïùò ÏµúÍ≥† DeFi ÏàòÏùµÎ•†ÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî. 50Í∞ú Ïù¥ÏÉÅÏùò ÌîÑÎ°úÌÜ†ÏΩúÏóêÏÑú ÎåÄÏ∂ú, Ïä§ÌÖåÏù¥ÌÇπ, LP Î≥¥ÏÉÅÏùÑ ÎπÑÍµêÌïòÏÑ∏Ïöî. Defillama APIÏùò Ïã§ÏãúÍ∞Ñ APY Îç∞Ïù¥ÌÑ∞ÏôÄ ÌÜ†ÌÅ∞, Ï≤¥Ïù∏, TVL, ÌíÄ ÌÉÄÏûÖÎ≥Ñ ÏßÄÎä•Ìòï ÌïÑÌÑ∞ÎßÅ."
  }
};

// Helper function for Korean currency formatting (Îßå/Ïñµ)
function formatKoreanCurrency(num) {
  if (num >= 100000000) return `${(num/100000000).toFixed(1)}ÏñµÏõê`;
  if (num >= 10000) return `${(num/10000).toFixed(1)}ÎßåÏõê`;
  return `${Math.round(num).toLocaleString()}Ïõê`;
}

// Language detection helper
function detectUserLanguage() {
  const browserLang = navigator.language.toLowerCase();
  if (browserLang.startsWith('ko')) return 'ko';
  return 'en';
}

// Translation helper function
function createTranslationFunction(language) {
  return function t(key, ...params) {
    const translation = translations[language][key];
    if (!translation) {
      // Fallback to English if translation missing
      const fallback = translations['en'][key];
      return fallback ? (typeof fallback === 'function' ? fallback(...params) : fallback) : key;
    }
    if (typeof translation === 'function') {
      return translation(...params);
    }
    return translation;
  };
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    translations,
    formatKoreanCurrency,
    detectUserLanguage,
    createTranslationFunction
  };
}